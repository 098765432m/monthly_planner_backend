// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: days.queries.sql

package day_repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDay = `-- name: CreateDay :one
INSERT INTO days (date, day_of_week, month_id)
VALUES ($1::date, $2, $3::UUID)
RETURNING id
`

type CreateDayParams struct {
	Date      pgtype.Date `json:"date"`
	DayOfWeek int32       `json:"day_of_week"`
	MonthID   pgtype.UUID `json:"month_id"`
}

func (q *Queries) CreateDay(ctx context.Context, arg CreateDayParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, createDay, arg.Date, arg.DayOfWeek, arg.MonthID)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const createRangeOfDays = `-- name: CreateRangeOfDays :exec
INSERT INTO days (date, day_of_week, month_id)
SELECT 
    gs::date as date,
    EXTRACT(DOW FROM gs)::int as day_of_week,
    $1 as month_id
FROM generate_series($2::date, $3::date, '1 day') AS gs
`

type CreateRangeOfDaysParams struct {
	MonthID   pgtype.UUID `json:"month_id"`
	DateStart pgtype.Date `json:"date_start"`
	DateEnd   pgtype.Date `json:"date_end"`
}

func (q *Queries) CreateRangeOfDays(ctx context.Context, arg CreateRangeOfDaysParams) error {
	_, err := q.db.Exec(ctx, createRangeOfDays, arg.MonthID, arg.DateStart, arg.DateEnd)
	return err
}

const getDayByDate = `-- name: GetDayByDate :one
SELECT id, date, day_of_week, month_id FROM days WHERE date = $1::date
`

func (q *Queries) GetDayByDate(ctx context.Context, date pgtype.Date) (Day, error) {
	row := q.db.QueryRow(ctx, getDayByDate, date)
	var i Day
	err := row.Scan(
		&i.ID,
		&i.Date,
		&i.DayOfWeek,
		&i.MonthID,
	)
	return i, err
}

const updateDayById = `-- name: UpdateDayById :exec
UPDATE days
SET date = $2,
    day_of_week = $3,
    month_id = $4
WHERE id = $1
`

type UpdateDayByIdParams struct {
	ID        pgtype.UUID `json:"id"`
	Date      pgtype.Date `json:"date"`
	DayOfWeek int32       `json:"day_of_week"`
	MonthID   pgtype.UUID `json:"month_id"`
}

func (q *Queries) UpdateDayById(ctx context.Context, arg UpdateDayByIdParams) error {
	_, err := q.db.Exec(ctx, updateDayById,
		arg.ID,
		arg.Date,
		arg.DayOfWeek,
		arg.MonthID,
	)
	return err
}
