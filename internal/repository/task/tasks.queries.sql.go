// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tasks.queries.sql

package task_repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (name, description, time_start, time_end)
VALUES ($1, $2, $3, $4)
RETURNING id, name, description, status, time_start, time_end, day_id
`

type CreateTaskParams struct {
	Name        string
	Description pgtype.Text
	TimeStart   pgtype.Time
	TimeEnd     pgtype.Time
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, createTask,
		arg.Name,
		arg.Description,
		arg.TimeStart,
		arg.TimeEnd,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Status,
		&i.TimeStart,
		&i.TimeEnd,
		&i.DayID,
	)
	return i, err
}

const deleteTaskById = `-- name: DeleteTaskById :exec
DELETE FROM tasks WHERE id = $1
`

func (q *Queries) DeleteTaskById(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteTaskById, id)
	return err
}

const getAllTaskOfADay = `-- name: GetAllTaskOfADay :many
SELECT id, name, description, status, time_start, time_end, day_id
FROM tasks
WHERE day_id = $1
ORDER BY time_start
`

func (q *Queries) GetAllTaskOfADay(ctx context.Context, dayID pgtype.UUID) ([]Task, error) {
	rows, err := q.db.Query(ctx, getAllTaskOfADay, dayID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Status,
			&i.TimeStart,
			&i.TimeEnd,
			&i.DayID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllTaskOfMonth = `-- name: GetAllTaskOfMonth :many
SELECT t.id, t.name, t.description, t.status, t.time_start, t.time_end, d.date
FROM tasks t
JOIN days d ON t.day_id = d.id
JOIN months m ON d.month_id = m.id
ORDER BY d.date
`

type GetAllTaskOfMonthRow struct {
	ID          pgtype.UUID
	Name        string
	Description pgtype.Text
	Status      TaskStatusEnum
	TimeStart   pgtype.Time
	TimeEnd     pgtype.Time
	Date        pgtype.Date
}

func (q *Queries) GetAllTaskOfMonth(ctx context.Context) ([]GetAllTaskOfMonthRow, error) {
	rows, err := q.db.Query(ctx, getAllTaskOfMonth)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllTaskOfMonthRow
	for rows.Next() {
		var i GetAllTaskOfMonthRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Status,
			&i.TimeStart,
			&i.TimeEnd,
			&i.Date,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTaskById = `-- name: UpdateTaskById :one
UPDATE tasks
SET name = $2, description = $3, status = $4, time_start = $5, time_end = $6, day_id = $7
WHERE id = $1
RETURNING id, name, description, status, time_start, time_end, day_id
`

type UpdateTaskByIdParams struct {
	ID          pgtype.UUID
	Name        string
	Description pgtype.Text
	Status      TaskStatusEnum
	TimeStart   pgtype.Time
	TimeEnd     pgtype.Time
	DayID       pgtype.UUID
}

func (q *Queries) UpdateTaskById(ctx context.Context, arg UpdateTaskByIdParams) (Task, error) {
	row := q.db.QueryRow(ctx, updateTaskById,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Status,
		arg.TimeStart,
		arg.TimeEnd,
		arg.DayID,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Status,
		&i.TimeStart,
		&i.TimeEnd,
		&i.DayID,
	)
	return i, err
}
