// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tasks.queries.sql

package task_repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (name, description, status, time_start, time_end, day_id, task_category_id)
VALUES ($1::text, $2::text, $3, $4::time, $5::time, $6::UUID, $7::UUID)
RETURNING id, name, description, status, time_start, time_end, day_id, task_category_id
`

type CreateTaskParams struct {
	Name           string             `json:"name"`
	Description    pgtype.Text        `json:"description"`
	Status         NullTaskStatusEnum `json:"status"`
	TimeStart      pgtype.Time        `json:"time_start"`
	TimeEnd        pgtype.Time        `json:"time_end"`
	DayID          pgtype.UUID        `json:"day_id"`
	TaskCategoryID pgtype.UUID        `json:"task_category_id"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, createTask,
		arg.Name,
		arg.Description,
		arg.Status,
		arg.TimeStart,
		arg.TimeEnd,
		arg.DayID,
		arg.TaskCategoryID,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Status,
		&i.TimeStart,
		&i.TimeEnd,
		&i.DayID,
		&i.TaskCategoryID,
	)
	return i, err
}

const deleteTaskById = `-- name: DeleteTaskById :exec
DELETE FROM tasks WHERE id = $1::UUID
`

func (q *Queries) DeleteTaskById(ctx context.Context, dollar_1 pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteTaskById, dollar_1)
	return err
}

const getAllTaskOfADay = `-- name: GetAllTaskOfADay :many
SELECT id, name, description, status, time_start, time_end, day_id, task_category_id
FROM tasks
WHERE day_id = $1
ORDER BY time_start
`

func (q *Queries) GetAllTaskOfADay(ctx context.Context, dayID pgtype.UUID) ([]Task, error) {
	rows, err := q.db.Query(ctx, getAllTaskOfADay, dayID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Status,
			&i.TimeStart,
			&i.TimeEnd,
			&i.DayID,
			&i.TaskCategoryID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTaskById = `-- name: GetTaskById :one
SELECT id, name, description, status, time_start, time_end, day_id, task_category_id FROM tasks WHERE id = $1::UUID
`

func (q *Queries) GetTaskById(ctx context.Context, dollar_1 pgtype.UUID) (Task, error) {
	row := q.db.QueryRow(ctx, getTaskById, dollar_1)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Status,
		&i.TimeStart,
		&i.TimeEnd,
		&i.DayID,
		&i.TaskCategoryID,
	)
	return i, err
}

const updateTaskById = `-- name: UpdateTaskById :one
UPDATE tasks
SET name = $1::text, description = $2::text, status = $3, time_start = $4::time, time_end = $5::time, day_id = $6::UUID, task_category_id = $7::UUID
WHERE id = $8::UUID
RETURNING id, name, description, status, time_start, time_end, day_id, task_category_id
`

type UpdateTaskByIdParams struct {
	Name           string             `json:"name"`
	Description    pgtype.Text        `json:"description"`
	Status         NullTaskStatusEnum `json:"status"`
	TimeStart      pgtype.Time        `json:"time_start"`
	TimeEnd        pgtype.Time        `json:"time_end"`
	DayID          pgtype.UUID        `json:"day_id"`
	TaskCategoryID pgtype.UUID        `json:"task_category_id"`
	TaskID         pgtype.UUID        `json:"task_id"`
}

func (q *Queries) UpdateTaskById(ctx context.Context, arg UpdateTaskByIdParams) (Task, error) {
	row := q.db.QueryRow(ctx, updateTaskById,
		arg.Name,
		arg.Description,
		arg.Status,
		arg.TimeStart,
		arg.TimeEnd,
		arg.DayID,
		arg.TaskCategoryID,
		arg.TaskID,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Status,
		&i.TimeStart,
		&i.TimeEnd,
		&i.DayID,
		&i.TaskCategoryID,
	)
	return i, err
}
